{"conference": "ICLR 2017 conference submission", "title": "Programming With a Differentiable Forth Interpreter", "abstract": "There are families of neural networks that can learn to compute any function, provided sufficient training data. However, given that in practice training data is scarce for all but a small set of problems, a core question is how to incorporate prior knowledge into a model. Here we consider the case of prior procedural knowledge, such as knowing the overall recursive structure of a sequence transduction program or the fact that a program will likely use arithmetic operations on real numbers to solve a task. To this end we present a differentiable interpreter for the programming language Forth. Through a neural implementation of the dual stack machine that underlies Forth, programmers can write program sketches with slots that can be filled with behaviour trained from program input-output data. As the program interpreter is end-to-end differentiable, we can optimize this behaviour directly through gradient descent techniques on user specified objectives, and also integrate the program into any larger neural computation graph. We show empirically that our interpreter is able to effectively leverage different levels of prior program structure and learn complex transduction tasks such as sequence sorting or addition with substantially less data and better generalisation over problem sizes. In addition, we introduce neural program optimisations based on symbolic computation and parallel branching that lead to significant speed improvements.", "histories": [], "reviews": [{"SUBSTANCE": 3, "is_meta_review": false, "comments": "This paper presents an approach to do (structured) program induction based on program sketches in Forth (a simple stack based language). They turn the overall too open problem of program induction int", "IS_META_REVIEW": false}, {"SUBSTANCE": 3, "comments": "This paper develops a differentiable interpreter for the Forth programming language. This enables writing a program \"sketch\" (a program with parts left out), with a hole to be filled in based upon lea", "ORIGINALITY": 5, "IS_META_REVIEW": false, "RECOMMENDATION": 4, "is_meta_review": false}, {"comments": "This paper presents an approach to make a programming language (Forth) interpreter differentiable such that it can learn the implementation of high-level instruction from provided examples. The paper ", "SOUNDNESS_CORRECTNESS": 4, "ORIGINALITY": 4, "IS_META_REVIEW": false, "CLARITY": 5, "is_meta_review": false}], "authors": "Matko Bo\u0161njak, Tim Rockt\u00e4schel, Jason Naradowsky, Sebastian Riedel", "accepted": false, "id": "509"}